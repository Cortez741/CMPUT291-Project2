<html><head><meta content="text/html; charset=UTF-8" http-equiv="content-type"><style type="text/css">@import url('https://themes.googleusercontent.com/fonts/css?kit=-ou4pOz2rBQXdlj5C-P57A');ul.lst-kix_t50b898z9isu-0{list-style-type:none}.lst-kix_t50b898z9isu-0>li:before{content:"\0025cf  "}ul.lst-kix_t50b898z9isu-5{list-style-type:none}ul.lst-kix_t50b898z9isu-6{list-style-type:none}ul.lst-kix_t50b898z9isu-7{list-style-type:none}ul.lst-kix_t50b898z9isu-8{list-style-type:none}ul.lst-kix_t50b898z9isu-1{list-style-type:none}ul.lst-kix_t50b898z9isu-2{list-style-type:none}.lst-kix_t50b898z9isu-7>li:before{content:"\0025cb  "}ul.lst-kix_t50b898z9isu-3{list-style-type:none}ul.lst-kix_t50b898z9isu-4{list-style-type:none}.lst-kix_t50b898z9isu-5>li:before{content:"\0025a0  "}.lst-kix_t50b898z9isu-6>li:before{content:"\0025cf  "}.lst-kix_t50b898z9isu-4>li:before{content:"\0025cb  "}.lst-kix_t50b898z9isu-8>li:before{content:"\0025a0  "}.lst-kix_t50b898z9isu-1>li:before{content:"\0025cb  "}.lst-kix_t50b898z9isu-2>li:before{content:"\0025a0  "}.lst-kix_t50b898z9isu-3>li:before{content:"\0025cf  "}ol{margin:0;padding:0}table td,table th{padding:0}.c7{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#3d85c6;border-top-width:1pt;border-right-width:1pt;border-left-color:#3d85c6;vertical-align:top;border-right-color:#3d85c6;border-left-width:1pt;border-top-style:solid;background-color:#3d85c6;border-left-style:solid;border-bottom-width:1pt;width:78pt;border-top-color:#3d85c6;border-bottom-style:solid}.c10{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:78pt;border-top-color:#000000;border-bottom-style:solid}.c1{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:78pt;border-top-color:#3d85c6;border-bottom-style:solid}.c24{color:#ffffff;font-weight:normal;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c20{color:#000000;font-weight:bold;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c6{color:#000000;font-weight:normal;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c14{color:#ffffff;font-weight:bold;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c17{border-spacing:0;border-collapse:collapse;margin-right:auto}.c23{background-color:#ffffff;font-size:11.5pt;color:#333333}.c8{orphans:2;widows:2;height:11pt}.c21{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c22{background-color:#ffffff;font-size:11.5pt;color:#0f502f}.c0{page-break-after:avoid;orphans:2;widows:2}.c11{orphans:2;widows:2}.c19{color:inherit;text-decoration:inherit}.c9{background-color:#ffffff;font-size:10.5pt}.c15{padding-top:0pt;line-height:1.0}.c4{padding-top:10pt;line-height:1.0}.c2{font-family:"Ubuntu"}.c12{padding-bottom:0pt}.c13{height:11pt}.c5{color:#3d85c6}.c18{padding-top:0pt}.c16{height:0pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style></head><body class="c21"><div><p class="c8"><span></span></p><p class="c11"><span>Victor Frunza &amp; Ian </span><span class="c2">Oltuszyk</span></p><p class="c11"><span>CMPUT 291 - Project 2</span></p><p class="c11"><span>University of Alberta</span></p></div><p class="c0 title" id="h.1hhu4tfk6li6"><span class="c2">CMPUT 291 - Project 2</span></p><p class="c0 subtitle" id="h.vq16ppxl88w4"><span class="c2">Berkeley DB &amp; File Systems</span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c8"><span class="c2"></span></p><p class="c11"><span class="c2">Authors: Victor Frunza &amp; Ian Oltuszyk</span></p><p class="c11"><span class="c2">Instructor: </span><span class="c2 c23">Li-Yan Yuan</span></p><p class="c11"><span class="c2">TA: </span><span class="c2 c22">Kriti Khare</span></p><p class="c11"><span class="c2">University of Alberta</span></p><p class="c11"><span class="c2">Due Date: April 7th, 2016</span></p><h1 class="c0 c15" id="h.6ieb519u3d4g"><span class="c2 c5">IMPLEMENTATION</span></h1><p class="c11"><span class="c2">Input was provided by storing four random keys into a char array prior to database population. Using this array in conjunction with a variable that increments and resets to 0 at a threshold of 4, we were able to reference them (in sequence) repeatedly between different searches.</span></p><h3 class="c0 c4" id="h.5wxd6v3tu290"><span class="c2">Key Search</span></h3><p class="c11"><span class="c2">The key search was done by performing a single query for both binary tree and hash type databases.</span></p><p class="c11"><span class="c2">Hash is expected to return with it&rsquo;s data in the shortest amount of time.</span></p><h3 class="c0 c4" id="h.s4wsiv66cr8p"><span class="c2">Data Search</span></h3><p class="c11"><span class="c2">The data search is done by setting the cursor to the first position and then iterating it traverses the whole database while finding matches. For the indexfile type, an associated hash database with reversed keys and data entries implements the key search mechanism to retrieve values quicker.</span></p><p class="c11"><span class="c2">Neither database type is expected to do well.</span></p><h3 class="c0 c4" id="h.iyxrnsfwzlm"><span class="c2">Range Search</span></h3><p class="c11"><span class="c2">The range search is done differs for hash and binary tree types; btree uses the DB_SET_RANGE parameter, while hash iterates over the entire database. Indexfile uses the same mechanism as btree to search by range from the primary database.</span></p><h3 class="c0 c4" id="h.h6bxzhckq6bh"><span class="c2">IndexFile</span></h3><p class="c11"><span class="c2">Our indexfile was a hash database that was associated with a btree database. The indexfile featured reversed key/data pairs which allowed for a large increase in the execution time for data searches. This file also allowed the use of the primary database when searching for keys and searching over ranges, as it got the benefits of the btree file system where similar entries reside beside each other in memory.</span></p><h1 class="c0 c4" id="h.rrcramsq3nse"><span class="c2 c5">Results</span></h1><h3 class="c0 c18" id="h.y8hk3egmx5k5"><span class="c2">Key Search</span></h3><a id="t.bb47080abfc8849dcd7f80d8669d03b6eeb8d93f"></a><a id="t.0"></a><table class="c17"><tbody><tr class="c16"><td class="c7" colspan="1" rowspan="1"><p class="c3 c13"><span class="c2 c24"></span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 2</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 3</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 4</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Avg</span></p></td></tr><tr class="c16"><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c20 c2">Btree</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">60</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">52</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">56</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">29</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">49</span></p></td></tr><tr class="c16"><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c20 c2">Hash</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">24</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">55</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">53</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">21</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">38</span></p></td></tr><tr class="c16"><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c20 c2">Indexfile</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">56</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">19</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">59</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">62</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">49</span></p></td></tr></tbody></table><p class="c8"><span class="c2"></span></p><h3 class="c0" id="h.2us26lg7hc7g"><span class="c2">Data Search</span></h3><a id="t.2509bc7d6bc9fc7c619dce9927476345acd19d34"></a><a id="t.1"></a><table class="c17"><tbody><tr class="c16"><td class="c7" colspan="1" rowspan="1"><p class="c3 c13"><span class="c20 c2"></span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 2</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c2 c14">Trial 3</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 4</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Avg</span></p></td></tr><tr class="c16"><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c20 c2">BTree</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">64742</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">62814</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">64216</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">62163</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">63484</span></p></td></tr><tr class="c16"><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c20 c2">Hash</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">77550</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">78489</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">75224</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">76407</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">76918</span></p></td></tr><tr class="c16"><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c20 c2">Indexfile</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c2 c6">100</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">67</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">62</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">112</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">85</span></p></td></tr></tbody></table><h3 class="c0" id="h.xahi4hkgnpix"><span class="c2">Range Search</span></h3><a id="t.fd3ab73708a777a1cc7c249ea3cdd3a4e3c9f4e0"></a><a id="t.2"></a><table class="c17"><tbody><tr class="c16"><td class="c7" colspan="1" rowspan="1"><p class="c3 c13"><span class="c20 c2"></span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 2</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 3</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Trial 4</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c3"><span class="c14 c2">Avg</span></p></td></tr><tr class="c16"><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c20 c2">BTree</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">7172</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">7340</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">8086</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">8556</span></p></td><td class="c1" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">7789</span></p></td></tr><tr class="c16"><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c20 c2">Hash</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">124560</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">150472</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">136110</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">133846</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">136247</span></p></td></tr><tr class="c16"><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c2 c20">Indexfile</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">7103</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">7513</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">6089</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">14090</span></p></td><td class="c10" colspan="1" rowspan="1"><p class="c3"><span class="c6 c2">8699</span></p></td></tr></tbody></table><h1 class="c0 c12" id="h.ufkhj3uk8t7r"><span class="c2 c5">Analysis</span></h1><h3 class="c0 c15" id="h.2hfbj2dh6zj2"><span class="c2">Key Search</span></h3><p class="c11"><span class="c2">The indexfile method uses the primary database for key searches so it&rsquo;s average result, 49 </span><span class="c9"><a class="c19" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Mu_(letter)&amp;sa=D&amp;ust=1460070903903000&amp;usg=AFQjCNHfbBhAVkWPxFgOdigdTSC4qGj9Vw">&mu;</a></span><span class="c2 c9"><a class="c19" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Mu_(letter)&amp;sa=D&amp;ust=1460070903903000&amp;usg=AFQjCNHfbBhAVkWPxFgOdigdTSC4qGj9Vw">s</a></span><span class="c2">&nbsp; is justifiably identical to btree. Hash is faster than both btree and indexfile, averaging 38 </span><span class="c9"><a class="c19" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Mu_(letter)&amp;sa=D&amp;ust=1460070903904000&amp;usg=AFQjCNGOFv1BjIrSaA8q8a0_GdaIdV0MTQ">&mu;</a></span><span class="c9 c2"><a class="c19" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Mu_(letter)&amp;sa=D&amp;ust=1460070903904000&amp;usg=AFQjCNGOFv1BjIrSaA8q8a0_GdaIdV0MTQ">s</a></span><span class="c2">. This is due to it&rsquo;s much faster retrieval of keys as positions inside of an array, rather than having to constantly determine the key&rsquo;s position relative to a node in a binary tree.</span></p><h3 class="c0 c4" id="h.ki38l25iz4hw"><span class="c2">Data Search</span></h3><p class="c11"><span class="c2">Indexfile is considerably faster with it&rsquo;s inverted key/value entries in a hash table, and it computes this task much more efficiently averaging 85 </span><span class="c9"><a class="c19" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Mu_(letter)&amp;sa=D&amp;ust=1460070903906000&amp;usg=AFQjCNGZtcCkoAolTNS_rgYnl14lJ2nbWQ">&mu;</a></span><span class="c9 c2"><a class="c19" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Mu_(letter)&amp;sa=D&amp;ust=1460070903906000&amp;usg=AFQjCNGZtcCkoAolTNS_rgYnl14lJ2nbWQ">s</a></span><span class="c2">. Indexfile is the superior mechanism because it does not have to iterate over the whole database, unlike hash and btree; it implements the key search on secondary database&rsquo;s keys (representing data). </span></p><h3 class="c0 c4" id="h.wpyp093j3ajf"><span class="c2">Range Search</span></h3><p class="c11"><span class="c2">Indexfile uses the same mechanism btree uses to search, thus giving it similar results. Btree is most successful because it&rsquo;s iteration is limited, and not over the entire database. &nbsp;The lower limit is searched for, then the database iterates until hitting the upper limit, preventing the program from checking all 100,000 key/value pairs. The Hash algorithm has to iterate over the whole database file in order to find the similar keys which are distributed randomly throughout the whole file.</span></p><div><p class="c11"><span class="c2">Note: All data is in microseconds.</span></p></div></body></html>
